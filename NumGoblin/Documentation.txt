Functions

factorial
	Description:
		Recursively calls the factorial function of the input subtract 1 until either 
	Input: 
		An unsigned integer x >= 0
	Output: 
		Integer factorial of the input  
	Example: 
		In: factorial(x)
		Out: x!

--------------------------------------------------------------------------------------------------------------------------------
Algorithms

palindrome
	Description:
		Checks if the input vector is a palindrome by iterating a pointer through the first and last index of the vector 
		NOTE: can be made more efficient by only checking through half the vector 
	Input:
		Vector of integers 
	Output: 
		True if the number is a palindrome, false otherwise 
	Example:
		In: palindrome({1,2,3,4})
		Out: False
		In: palindrome({1,2,3,2,1})
		Out: True


pAlg
	Description:
		Iterates through the input set and places the next number in every possible position through the current permutation set 
		Works similarly to the Steinhouse-Johnson-Trotter algorithm
	Input: 
		Current permutation set and set of values to be permutated
	Output: 
		The set of all permutations of the input 
	Example: 
		In: pAlg({{}, {1,2,3}})
		Out: {{1,2,3}, {1,3,2}, {3,1,2}, ... , {3,2,1}}


prime
	Description:
		Checks if the input is a prime number, firstly checks if the number is 2 or 3.
		Then it is checked whether the number negative, or is divisible by 2 or 3.
		Finally iterates up to the square root of x checking if it is divisible by the respective index
	Input: 
		Any integer
	Output:
		True if the number is prime, false otherwise
	Example:
		In: prime(7)
		Out: True
		In: prime(10)
		Out: False

sumVector
	Description:
		Takes two vectors representing positive integers and sums them by iterating through each index to create a new vector.
		There is a carry 'bit' which represents 10 for if two numbers sum exceeds or equals 10
		Values are stored backwards so {0,1} is 10 
	Input: 
		Two vectors of integers
	Output:
		The sum of these two vectors if they were a single number
	Example:
		In: sumVector({1,2}, {5})			21 + 5 
		Out: {6,2}							26

toVector
	Description:
		Converts the input value into a vector of its respective digits by iteratively dividing by powers of 10 and pushing to 
		the vector. 
	Input: 
		An unsigned integer
	Output: 
		Vector of integers with each index being between 0 and 9 
	Example:
		In: toVector(123)
		Out: {1,2,3}